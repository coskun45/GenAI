2024-06-04 14:37:59 [INFO] Question: write the first five rows
2024-06-04 14:37:59 [INFO] Running PandasAI with local LLM...
2024-06-04 14:37:59 [INFO] Prompt ID: 3640c426-2833-48d7-8354-3ca7af921477
2024-06-04 14:37:59 [INFO] Executing Pipeline: GenerateChatPipeline
2024-06-04 14:37:59 [INFO] Executing Step 0: ValidatePipelineInput
2024-06-04 14:37:59 [INFO] Executing Step 1: CacheLookup
2024-06-04 14:37:59 [INFO] Executing Step 2: PromptGeneration
2024-06-04 14:37:59 [INFO] Using prompt: <dataframe name="customer">
dfs[0]:350x11
Customer ID,Gender,Age,City,Membership Type,Total Spend,Items Purchased,Average Rating,Discount Applied,Days Since Last Purchase,Satisfaction Level
236,Male,28,San Francisco,Gold,1490.1,21,4.9,FALSE,9,Satisfied
241,Female,43,Chicago,Bronze,505.75,10,3.3,TRUE,39,Unsatisfied
446,Male,32,Miami,Silver,660.3,10,3.8,TRUE,42,Unsatisfied
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 write the first five rows

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-06-04 14:37:59 [INFO] Executing Step 3: CodeGenerator
2024-06-04 14:38:19 [INFO] HTTP Request: POST http://localhost:11434/v1/chat/completions "HTTP/1.1 200 OK"
2024-06-04 14:38:19 [INFO] Prompt used:
            <dataframe name="customer">
dfs[0]:350x11
Customer ID,Gender,Age,City,Membership Type,Total Spend,Items Purchased,Average Rating,Discount Applied,Days Since Last Purchase,Satisfaction Level
236,Male,28,San Francisco,Gold,1490.1,21,4.9,FALSE,9,Satisfied
241,Female,43,Chicago,Bronze,505.75,10,3.3,TRUE,39,Unsatisfied
446,Male,32,Miami,Silver,660.3,10,3.8,TRUE,42,Unsatisfied
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 write the first five rows

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-06-04 14:38:19 [INFO] Code generated:
            ```
            import pandas as pd

dfs = [pd.DataFrame({
    "Customer ID": ["236", "241", "446"],
    "Gender": ["Male", "Female", "Male"],
    "Age": [28, 43, 32],
    "City": ["San Francisco", "Chicago", "Miami"],
    "Membership Type": ["Gold", "Bronze", "Silver"],
    "Total Spend": [1490.1, 505.75, 660.3],
    "Items Purchased": [21, 10, 10],
    "Average Rating": [4.9, 3.3, 3.8],
    "Discount Applied": [False, True, True],
    "Days Since Last Purchase": [9, 39, 42],
    "Satisfaction Level": ["Satisfied", "Unsatisfied", "Unsatisfied"]
})]

result = {"type": "dataframe", "value": dfs[0].head(5)}

print(result)
            ```
            
2024-06-04 14:38:19 [INFO] Executing Step 4: CachePopulation
2024-06-04 14:38:19 [INFO] Executing Step 5: CodeCleaning
2024-06-04 14:38:19 [INFO] 
Code running:
```
result = {'type': 'dataframe', 'value': dfs[0].head(5)}
print(result)
        ```
2024-06-04 14:38:19 [INFO] Executing Step 6: CodeExecution
2024-06-04 14:38:19 [INFO] Executing Step 7: ResultValidation
2024-06-04 14:38:19 [INFO] Answer: {'type': 'dataframe', 'value':    Customer ID  Gender  Age           City  ... Average Rating  Discount Applied  Days Since Last Purchase  Satisfaction Level
0          101  Female   29       New York  ...            4.6              True                        25           Satisfied
1          102    Male   34    Los Angeles  ...            4.1             False                        18             Neutral
2          103  Female   43        Chicago  ...            3.4              True                        42         Unsatisfied
3          104    Male   30  San Francisco  ...            4.7             False                        12           Satisfied
4          105    Male   27          Miami  ...            4.0              True                        55         Unsatisfied

[5 rows x 11 columns]}
2024-06-04 14:38:19 [INFO] Executing Step 8: ResultParsing
2024-06-04 14:39:26 [INFO] Question: how many rows and columns are there in database
2024-06-04 14:39:26 [INFO] Running PandasAI with local LLM...
2024-06-04 14:39:26 [INFO] Prompt ID: b0e7d334-1ec2-4a4e-9dd8-eb57f764df7c
2024-06-04 14:39:26 [INFO] Executing Pipeline: GenerateChatPipeline
2024-06-04 14:39:26 [INFO] Executing Step 0: ValidatePipelineInput
2024-06-04 14:39:26 [INFO] Executing Step 1: CacheLookup
2024-06-04 14:39:26 [INFO] Executing Step 2: PromptGeneration
2024-06-04 14:39:26 [INFO] Using prompt: <dataframe name="customer">
dfs[0]:350x11
Customer ID,Gender,Age,City,Membership Type,Total Spend,Items Purchased,Average Rating,Discount Applied,Days Since Last Purchase,Satisfaction Level
292,Female,36,Houston,Bronze,460.5,8,3.1,FALSE,19,Neutral
205,Female,41,Chicago,Bronze,480.25,9,3.6,TRUE,38,Unsatisfied
383,Male,35,Los Angeles,Silver,820.9,12,4.3,FALSE,15,Neutral
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 how many rows and columns are there in database

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-06-04 14:39:26 [INFO] Executing Step 3: CodeGenerator
2024-06-04 14:39:42 [INFO] HTTP Request: POST http://localhost:11434/v1/chat/completions "HTTP/1.1 200 OK"
2024-06-04 14:39:42 [INFO] Prompt used:
            <dataframe name="customer">
dfs[0]:350x11
Customer ID,Gender,Age,City,Membership Type,Total Spend,Items Purchased,Average Rating,Discount Applied,Days Since Last Purchase,Satisfaction Level
292,Female,36,Houston,Bronze,460.5,8,3.1,FALSE,19,Neutral
205,Female,41,Chicago,Bronze,480.25,9,3.6,TRUE,38,Unsatisfied
383,Male,35,Los Angeles,Silver,820.9,12,4.3,FALSE,15,Neutral
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 how many rows and columns are there in database

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-06-04 14:39:42 [INFO] Code generated:
            ```
            # TODO: import the required dependencies
import pandas as pd

# Load the data
dfs = [pd.DataFrame({
    "Customer ID": [292, 205, 383],
    "Gender": ["Female", "Female", "Male"],
    "Age": [36, 41, 35],
    "City": ["Houston", "Chicago", "Los Angeles"],
    "Membership Type": ["Bronze", "Bronze", "Silver"],
    "Total Spend": [460.5, 480.25, 820.9],
    "Items Purchased": [8, 9, 12],
    "Average Rating": [3.1, 3.6, 4.3],
    "Discount Applied": [False, True, False],
    "Days Since Last Purchase": [19, 38, 15],
    "Satisfaction Level": ["Neutral", "Unsatisfied", "Neutral"]
})]

# Get the number of rows and columns
num_rows = len(dfs[0])
num_cols = dfs[0].shape[1]
result = {"type": "string", "value": f"There are {num_rows} rows and {num_cols} columns in the database."}

print(result)
            ```
            
2024-06-04 14:39:42 [INFO] Executing Step 4: CachePopulation
2024-06-04 14:39:42 [INFO] Executing Step 5: CodeCleaning
2024-06-04 14:39:42 [INFO] 
Code running:
```
num_rows = len(dfs[0])
num_cols = dfs[0].shape[1]
result = {'type': 'string', 'value': f'There are {num_rows} rows and {num_cols} columns in the database.'}
print(result)
        ```
2024-06-04 14:39:42 [INFO] Executing Step 6: CodeExecution
2024-06-04 14:39:42 [INFO] Executing Step 7: ResultValidation
2024-06-04 14:39:42 [INFO] Answer: {'type': 'string', 'value': 'There are 350 rows and 11 columns in the database.'}
2024-06-04 14:39:42 [INFO] Executing Step 8: ResultParsing
2024-06-04 14:43:23 [INFO] Question: how many rows and columns are there in database
2024-06-04 14:43:23 [INFO] Running PandasAI with local LLM...
2024-06-04 14:43:23 [INFO] Prompt ID: 42368bf0-825e-4def-ad83-465a4d973828
2024-06-04 14:43:23 [INFO] Executing Pipeline: GenerateChatPipeline
2024-06-04 14:43:23 [INFO] Executing Step 0: ValidatePipelineInput
2024-06-04 14:43:23 [INFO] Executing Step 1: CacheLookup
2024-06-04 14:43:23 [INFO] Using cached response
2024-06-04 14:43:23 [INFO] Executing Step 2: PromptGeneration
2024-06-04 14:43:23 [INFO] Executing Step 2: Skipping...
2024-06-04 14:43:23 [INFO] Executing Step 3: CodeGenerator
2024-06-04 14:43:23 [INFO] Executing Step 3: Skipping...
2024-06-04 14:43:23 [INFO] Executing Step 4: CachePopulation
2024-06-04 14:43:23 [INFO] Executing Step 4: Skipping...
2024-06-04 14:43:23 [INFO] Executing Step 5: CodeCleaning
2024-06-04 14:43:23 [INFO] 
Code running:
```
num_rows = len(dfs[0])
num_cols = dfs[0].shape[1]
result = {'type': 'string', 'value': f'There are {num_rows} rows and {num_cols} columns in the database.'}
print(result)
        ```
2024-06-04 14:43:23 [INFO] Executing Step 6: CodeExecution
2024-06-04 14:43:23 [INFO] Executing Step 7: ResultValidation
2024-06-04 14:43:23 [INFO] Answer: {'type': 'string', 'value': 'There are 350 rows and 11 columns in the database.'}
2024-06-04 14:43:23 [INFO] Executing Step 8: ResultParsing
2024-06-04 14:43:55 [INFO] Question: get first five rows
2024-06-04 14:43:55 [INFO] Running PandasAI with local LLM...
2024-06-04 14:43:55 [INFO] Prompt ID: fab82a04-5867-44cb-890a-d087b914248c
2024-06-04 14:43:55 [INFO] Executing Pipeline: GenerateChatPipeline
2024-06-04 14:43:55 [INFO] Executing Step 0: ValidatePipelineInput
2024-06-04 14:43:55 [INFO] Executing Step 1: CacheLookup
2024-06-04 14:43:55 [INFO] Executing Step 2: PromptGeneration
2024-06-04 14:43:55 [INFO] Using prompt: <dataframe name="customer">
dfs[0]:350x11
Customer ID,Gender,Age,City,Membership Type,Total Spend,Items Purchased,Average Rating,Discount Applied,Days Since Last Purchase,Satisfaction Level
309,Female,38,Houston,Bronze,460.9,8,3.2,FALSE,25,Neutral
327,Female,37,Houston,Bronze,430.8,7,3.4,FALSE,23,Neutral
257,Female,31,New York,Gold,1140.6,15,4.6,TRUE,27,Satisfied
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 get first five rows

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-06-04 14:43:55 [INFO] Executing Step 3: CodeGenerator
2024-06-04 14:44:10 [INFO] HTTP Request: POST http://localhost:11434/v1/chat/completions "HTTP/1.1 200 OK"
2024-06-04 14:44:10 [INFO] Prompt used:
            <dataframe name="customer">
dfs[0]:350x11
Customer ID,Gender,Age,City,Membership Type,Total Spend,Items Purchased,Average Rating,Discount Applied,Days Since Last Purchase,Satisfaction Level
309,Female,38,Houston,Bronze,460.9,8,3.2,FALSE,25,Neutral
327,Female,37,Houston,Bronze,430.8,7,3.4,FALSE,23,Neutral
257,Female,31,New York,Gold,1140.6,15,4.6,TRUE,27,Satisfied
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 get first five rows

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-06-04 14:44:10 [INFO] Code generated:
            ```
            # TODO: import the required dependencies
import pandas as pd

dfs = [
    <dataframe name="customer">
    dfs[0]:350x11
    Customer ID,Gender,Age,City,Membership Type,Total Spend,Items Purchased,Average Rating,Discount Applied,Days Since Last Purchase,Satisfaction Level
    309,Female,38,Houston,Bronze,460.9,8,3.2,FALSE,25,Neutral
    327,Female,37,Houston,Bronze,430.8,7,3.4,FALSE,23,Neutral
    257,Female,31,New York,Gold,1140.6,15,4.6,TRUE,27,Satisfied
    </dataframe>
]

# Get the first five rows of the dataframe
first_five_rows = dfs[0].head(5)

result = {"type": "dataframe", "value": pd.DataFrame(first_five_rows)}

print(result)
            ```
            
2024-06-04 14:44:10 [INFO] Executing Step 4: CachePopulation
2024-06-04 14:44:10 [INFO] Executing Step 5: CodeCleaning
2024-06-04 14:44:10 [ERROR] Pipeline failed on step 5: cannot access local variable 'code_to_run' where it is not associated with a value
2024-06-04 14:44:26 [INFO] Question: how many rows and columns are there in database
2024-06-04 14:44:26 [INFO] Running PandasAI with local LLM...
2024-06-04 14:44:26 [INFO] Prompt ID: 0c985cf9-e8c4-4719-aefc-b3e1a4e2fc98
2024-06-04 14:44:26 [INFO] Executing Pipeline: GenerateChatPipeline
2024-06-04 14:44:26 [INFO] Executing Step 0: ValidatePipelineInput
2024-06-04 14:44:26 [INFO] Executing Step 1: CacheLookup
2024-06-04 14:44:26 [INFO] Using cached response
2024-06-04 14:44:26 [INFO] Executing Step 2: PromptGeneration
2024-06-04 14:44:26 [INFO] Executing Step 2: Skipping...
2024-06-04 14:44:26 [INFO] Executing Step 3: CodeGenerator
2024-06-04 14:44:26 [INFO] Executing Step 3: Skipping...
2024-06-04 14:44:26 [INFO] Executing Step 4: CachePopulation
2024-06-04 14:44:26 [INFO] Executing Step 4: Skipping...
2024-06-04 14:44:26 [INFO] Executing Step 5: CodeCleaning
2024-06-04 14:44:26 [INFO] 
Code running:
```
num_rows = len(dfs[0])
num_cols = dfs[0].shape[1]
result = {'type': 'string', 'value': f'There are {num_rows} rows and {num_cols} columns in the database.'}
print(result)
        ```
2024-06-04 14:44:26 [INFO] Executing Step 6: CodeExecution
2024-06-04 14:44:26 [INFO] Executing Step 7: ResultValidation
2024-06-04 14:44:26 [INFO] Answer: {'type': 'string', 'value': 'There are 350 rows and 11 columns in the database.'}
2024-06-04 14:44:26 [INFO] Executing Step 8: ResultParsing
2024-06-04 14:45:23 [INFO] Question: Plot a bar chart of gender column
2024-06-04 14:45:23 [INFO] Running PandasAI with local LLM...
2024-06-04 14:45:23 [INFO] Prompt ID: f8697b39-0042-427e-8e5f-ad62f0578f61
2024-06-04 14:45:23 [INFO] Executing Pipeline: GenerateChatPipeline
2024-06-04 14:45:23 [INFO] Executing Step 0: ValidatePipelineInput
2024-06-04 14:45:23 [INFO] Executing Step 1: CacheLookup
2024-06-04 14:45:23 [INFO] Executing Step 2: PromptGeneration
2024-06-04 14:45:23 [INFO] Using prompt: <dataframe name="customer">
dfs[0]:350x11
Customer ID,Gender,Age,City,Membership Type,Total Spend,Items Purchased,Average Rating,Discount Applied,Days Since Last Purchase,Satisfaction Level
173,Female,31,New York,Gold,1130.6,15,4.5,TRUE,26,Satisfied
396,Female,41,Chicago,Bronze,475.25,9,3.6,TRUE,44,Unsatisfied
287,Female,31,New York,Gold,1130.6,15,4.5,TRUE,26,Satisfied
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 Plot a bar chart of gender column

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
2024-06-04 14:45:23 [INFO] Executing Step 3: CodeGenerator
2024-06-04 14:45:41 [INFO] HTTP Request: POST http://localhost:11434/v1/chat/completions "HTTP/1.1 200 OK"
2024-06-04 14:45:41 [INFO] Prompt used:
            <dataframe name="customer">
dfs[0]:350x11
Customer ID,Gender,Age,City,Membership Type,Total Spend,Items Purchased,Average Rating,Discount Applied,Days Since Last Purchase,Satisfaction Level
173,Female,31,New York,Gold,1130.6,15,4.5,TRUE,26,Satisfied
396,Female,41,Chicago,Bronze,475.25,9,3.6,TRUE,44,Unsatisfied
287,Female,31,New York,Gold,1130.6,15,4.5,TRUE,26,Satisfied
</dataframe>




Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: 
type (possible values "string", "number", "dataframe", "plot"). Examples: { "type": "string", "value": f"The highest salary is {highest_salary}." } or { "type": "number", "value": 125 } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "plot", "value": "temp_chart.png" }

```



### QUERY
 Plot a bar chart of gender column

Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "matplotlib" for charts, save as png.


Generate python code and return full updated code:
            
2024-06-04 14:45:41 [INFO] Code generated:
            ```
            # TODO: import the required dependencies
import pandas as pd
import matplotlib.pyplot as plt

# Load the customer data into a Pandas DataFrame
dfs = [pd.DataFrame({
    "Customer ID": [173, 396, 287],
    "Gender": ["Female", "Female", "Female"],
    "Age": [31, 41, 31],
    "City": ["New York", "Chicago", "New York"],
    "Membership Type": ["Gold", "Bronze", "Gold"],
    "Total Spend": [1130.6, 475.25, 1130.6],
    "Items Purchased": [15, 9, 15],
    "Average Rating": [4.5, 3.6, 4.5],
    "Discount Applied": [True, True, True],
    "Days Since Last Purchase": [26, 44, 26],
    "Satisfaction Level": ["Satisfied", "Unsatisfied", "Satisfied"]
})]

# Create a bar chart of the gender column
gender_counts = dfs[0]["Gender"].value_counts().to_dict()
plt.bar(gender_counts.keys(), gender_counts.values())
plt.xlabel("Gender")
plt.ylabel("Count")
plt.title("Bar Chart: Gender Distribution")
plt.savefig("gender_distribution.png")

# Declare result var:
result = {"type": "plot", "value": "gender_distribution.png"}
print(result)
            ```
            
2024-06-04 14:45:41 [INFO] Executing Step 4: CachePopulation
2024-06-04 14:45:41 [INFO] Executing Step 5: CodeCleaning
2024-06-04 14:45:41 [INFO] Saving charts to C:\Users\ecoskun\Desktop\githubUpload\GenAI\MySQLwithPandasAIOllamaStreamlit\exports\charts\temp_chart.png
2024-06-04 14:45:41 [INFO] 
Code running:
```
gender_counts = dfs[0]['Gender'].value_counts().to_dict()
plt.bar(gender_counts.keys(), gender_counts.values())
plt.xlabel('Gender')
plt.ylabel('Count')
plt.title('Bar Chart: Gender Distribution')
plt.savefig('C:/Users/ecoskun/Desktop/githubUpload/GenAI/MySQLwithPandasAIOllamaStreamlit/exports/charts/temp_chart.png')
result = {'type': 'plot', 'value': 'C:/Users/ecoskun/Desktop/githubUpload/GenAI/MySQLwithPandasAIOllamaStreamlit/exports/charts/temp_chart.png'}
print(result)
        ```
2024-06-04 14:45:41 [INFO] Executing Step 6: CodeExecution
2024-06-04 14:45:41 [INFO] Executing Step 7: ResultValidation
2024-06-04 14:45:41 [INFO] Answer: {'type': 'plot', 'value': 'C:/Users/ecoskun/Desktop/githubUpload/GenAI/MySQLwithPandasAIOllamaStreamlit/exports/charts/temp_chart.png'}
2024-06-04 14:45:41 [INFO] Executing Step 8: ResultParsing
